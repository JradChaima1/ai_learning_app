// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Added for password authentication
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  quizResults   QuizResult[]
  voiceCalls    VoiceCall[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  content     String   @db.Text
  difficulty  String   @default("beginner")
  duration    Int?     // in minutes
  topics      String[] // Array of topics
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizzes     Quiz[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quiz {
  id          String       @id @default(cuid())
  title       String
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions   Question[]
  results     QuizResult[]
  voiceCalls  VoiceCall[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Question {
  id        String   @id @default(cuid())
  question  String   @db.Text
  options   String[] // Array of options
  correct   Int      // Index of correct answer
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model QuizResult {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Int      // Score out of total questions
  total     Int      // Total questions
  answers   Json     // Store user answers
  createdAt DateTime @default(now())
}

model VoiceCall {
  id          String   @id @default(cuid())
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumber String
  status      String   // initiated, in-progress, completed, failed, ended
  results     Json?    // Store quiz results
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}